class.GILD[class.GILD == 'D'] <- 1                      # D
### Generate Features for each Class
# class, preceeding 10 days close average centered at day10, preceeding 10 days average rsi, preceeding 5 days average rsi, preceeding day rsi, preceeding 10 day over sold average, preceeding 5 day over sold average, preceeding 10 day undersold average, preceeding 5 day undersold average
# preceeding 10 days average rsi
rsi10day.GILD =  rep(0, as.integer(length(rsi.GILD)/5))
segment = 1:length(rsi10day.GILD)
for (d in segment){
rsi10day.GILD[d] <- mean(rsi.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Log Returns
log10day.GILD =  rep(0, as.integer(length(log.GILD)/5))
segment = 1:length(log10day.GILD)
for (d in segment){
log10day.GILD[d] <- mean(log.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Simple Moving Average
sma10day.GILD =  rep(0, as.integer(length(sma.GILD)/5))
segment = 1:length(sma10day.GILD)
for (d in segment){
sma10day.GILD[d] <- mean(sma.GILD[((d*5)-4):((d*5)+5)])
}
### Ground Truth Dataframe
Class.GILD = as.integer(class.GILD)
stockData <- data.frame(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD)
### Fit Linear Model to Closing Price of One Stock
fit1 = glm(Class.GILD~rsi10day.GILD+log10day.GILD+sma10day.GILD, data= stockData)
pairs(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD)
pairs(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD, data=stockData)
pairs(Class.GILD, rsi10day.GILD, sma10day.GILD)
pairs(Class.GILD, rsi10day.GILD)
pairs(Class.GILD, rsi10day.GILD, log10day.GILD)
log10day.GILD
fit1 = glm(Class.GILD~rsi10day.GILD+log10day.GILD+sma10day.GILD, data= stockData)
summary(fit1)
# preceeding 10 days average Oversold
over10day.GILD =  rep(0, as.integer(length(oversold.GILD)/5))
segment = 1:length(oversold.GILD)
for (d in segment){
over10day.GILD[d] <- mean(oversold.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Undersold
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
Class.GILD = as.integer(class.GILD)
stockData <- data.frame(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD, over10day.GILD, under10day.GILD)
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
### Financial Analysis Test
require(quantmod)
require(ISLR)
require(TTR)
library(class)
#require(ggplot2)
### Use single quotes and specify data source:
Ticker1 = "GILD"
Ticker2 = "OAK"
Ticker3 = "ORCL"
##Download Stock Data
varList <- c(Ticker1, Ticker2, Ticker3)
xtsList=rep(0,length(varList))
degree = 1:3
for (d in degree){
getSymbols(varList[d], src = "google") # src = "yahoo" is the default
# Candlestick Data Visualization
candleChart(get(varList[d]), subset='201407::201412/', name = varList[d], theme='white',TA=NULL) #yyyymmdd::yyyymmdd (start time :: end time)
addVo()
addRSI()
addBBands()
addMACD(32,50,12)
}
### Calculate Indicators for One Stock
Open = as.vector(GILD[, "GILD.Open"])
High = as.vector(GILD[, "GILD.High"])
Low = as.vector(GILD[, "GILD.Low"])
Close = as.vector(GILD[, "GILD.Close"])
# Calculate the daily log returns:
Log.GILD <- log(Close[-1]/Close[-length(Close)])
log.GILD = 100*Log.GILD # Transformation so that the numbers are not soooo small
# Calculate the 10 day SMA
sma.GILD <- SMA(Close, 10)
# Calculate the over and under 200 day SMA
# Calculate the over and under the S&P 500 performance
# Calculate the RSI
rsi.GILD <- RSI(Close)
# Calculate RSI under 30 and over 70
oversold.GILD = rsi.GILD
oversold.GILD[oversold.GILD < 70] <- 0 # 0 is for times that the RSI is under 70
oversold.GILD[oversold.GILD > 70] <- 1 # 1 is for times that the RSI is over 70
undersold.GILD = rsi.GILD
undersold.GILD[undersold.GILD < 30] <- 1 # 1 is for times that the RSI is under 30
undersold.GILD[undersold.GILD > 30] <- 0 # 0 is for times that the RSI is over 30
# par(mfrow=c(2,1))
# plot(oversold.GILD, col = "red")
# plot(undersold.GILD, col = "blue")
# Calculate the Daily Change
change.GILD = Open-Close
# Calculate the spread of the Daily Change using Boiler Bands
bb.GILD = BBands(Close)
# Calculate Lag statistics 1, 5, 10, 20, 50, 100, 200
lagList <- c(1, 5, 10, 20, 50, 100, 200) #determine 'k' as number of lags (in units of observation)
lag.GILD=matrix(0, length(GILD),length(lagList)) #generate an empty vector for the loop
degree = 1:7
for (d in degree){
lag.GILD[,d] = lag(GILD[,4], k = lagList[d])
}
# ### Plot the features
# GUILDdata = data.frame(Close, change.GILD, rsi.GILD, sma.GILD, bb.GILD[,1], bb.GILD[,2], bb.GILD[,3], bb.GILD[,4], undersold.GILD, oversold.GILD)
# pairs(GUILDdata)
### Generate Training and Test Data
# Goal is to predict the 1-day, 5-day, ... n-day forcast for a stock
# positive movement from t0 to tn using X (starting with 10) days of previous indicators as data
# there can be three Classes. A is > 2% return; B is > 0 to 2 % return; C is -2 to 0 % return; D is <-2 % return
# calcualte the percent [%] five (5) day return
fiveday.GILD =  rep(0, as.integer(length(Close)/5))
segment = 1:length(fiveday.GILD)
for (d in segment){
fiveday.GILD[d] = ((Close[(d+1)*5]-Close[d*5])/Close[d*5])*100
}
class.GILD = fiveday.GILD
class.GILD[class.GILD > 6] <- 'A'                       # A
class.GILD[class.GILD > 0 & class.GILD <= 6 ] <- 'B'    # B
class.GILD[class.GILD > -6 & class.GILD <= 0] <- 'C'    # C
class.GILD[class.GILD <= -6] <- 'D'                     # D
class.GILD[class.GILD == 'A'] <- 4                      # A
class.GILD[class.GILD == 'B'] <- 3                      # B
class.GILD[class.GILD == 'C'] <- 2                      # C
class.GILD[class.GILD == 'D'] <- 1                      # D
### Generate Features for each Class
# class, preceeding 10 days close average centered at day10, preceeding 10 days average rsi, preceeding 5 days average rsi, preceeding day rsi, preceeding 10 day over sold average, preceeding 5 day over sold average, preceeding 10 day undersold average, preceeding 5 day undersold average
# preceeding 10 days average rsi
rsi10day.GILD =  rep(0, as.integer(length(rsi.GILD)/5))
segment = 1:length(rsi10day.GILD)
for (d in segment){
rsi10day.GILD[d] <- mean(rsi.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Log Returns
log10day.GILD =  rep(0, as.integer(length(log.GILD)/5))
segment = 1:length(log10day.GILD)
for (d in segment){
log10day.GILD[d] <- mean(log.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Simple Moving Average
sma10day.GILD =  rep(0, as.integer(length(sma.GILD)/5))
segment = 1:length(sma10day.GILD)
for (d in segment){
sma10day.GILD[d] <- mean(sma.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Oversold
over10day.GILD =  rep(0, as.integer(length(oversold.GILD)/5))
segment = 1:length(oversold.GILD)
for (d in segment){
over10day.GILD[d] <- mean(oversold.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Undersold
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
### Financial Analysis Test
require(quantmod)
require(ISLR)
require(TTR)
library(class)
#require(ggplot2)
### Use single quotes and specify data source:
Ticker1 = "GILD"
Ticker2 = "OAK"
Ticker3 = "ORCL"
##Download Stock Data
varList <- c(Ticker1, Ticker2, Ticker3)
xtsList=rep(0,length(varList))
degree = 1:3
for (d in degree){
getSymbols(varList[d], src = "google") # src = "yahoo" is the default
# Candlestick Data Visualization
candleChart(get(varList[d]), subset='201407::201412/', name = varList[d], theme='white',TA=NULL) #yyyymmdd::yyyymmdd (start time :: end time)
addVo()
addRSI()
addBBands()
addMACD(32,50,12)
}
### Calculate Indicators for One Stock
Open = as.vector(GILD[, "GILD.Open"])
High = as.vector(GILD[, "GILD.High"])
Low = as.vector(GILD[, "GILD.Low"])
Close = as.vector(GILD[, "GILD.Close"])
# Calculate the daily log returns:
Log.GILD <- log(Close[-1]/Close[-length(Close)])
log.GILD = 100*Log.GILD # Transformation so that the numbers are not soooo small
# Calculate the 10 day SMA
sma.GILD <- SMA(Close, 10)
# Calculate the over and under 200 day SMA
# Calculate the over and under the S&P 500 performance
# Calculate the RSI
rsi.GILD <- RSI(Close)
# Calculate RSI under 30 and over 70
oversold.GILD = rsi.GILD
oversold.GILD[oversold.GILD < 70] <- 0 # 0 is for times that the RSI is under 70
oversold.GILD[oversold.GILD > 70] <- 1 # 1 is for times that the RSI is over 70
undersold.GILD = rsi.GILD
undersold.GILD[undersold.GILD < 30] <- 1 # 1 is for times that the RSI is under 30
undersold.GILD[undersold.GILD > 30] <- 0 # 0 is for times that the RSI is over 30
# par(mfrow=c(2,1))
# plot(oversold.GILD, col = "red")
# plot(undersold.GILD, col = "blue")
# Calculate the Daily Change
change.GILD = Open-Close
# Calculate the spread of the Daily Change using Boiler Bands
bb.GILD = BBands(Close)
# Calculate Lag statistics 1, 5, 10, 20, 50, 100, 200
lagList <- c(1, 5, 10, 20, 50, 100, 200) #determine 'k' as number of lags (in units of observation)
lag.GILD=matrix(0, length(GILD),length(lagList)) #generate an empty vector for the loop
degree = 1:7
for (d in degree){
lag.GILD[,d] = lag(GILD[,4], k = lagList[d])
}
# ### Plot the features
# GUILDdata = data.frame(Close, change.GILD, rsi.GILD, sma.GILD, bb.GILD[,1], bb.GILD[,2], bb.GILD[,3], bb.GILD[,4], undersold.GILD, oversold.GILD)
# pairs(GUILDdata)
### Generate Training and Test Data
# Goal is to predict the 1-day, 5-day, ... n-day forcast for a stock
# positive movement from t0 to tn using X (starting with 10) days of previous indicators as data
# there can be three Classes. A is > 2% return; B is > 0 to 2 % return; C is -2 to 0 % return; D is <-2 % return
# calcualte the percent [%] five (5) day return
fiveday.GILD =  rep(0, as.integer(length(Close)/5))
segment = 1:length(fiveday.GILD)
for (d in segment){
fiveday.GILD[d] = ((Close[(d+1)*5]-Close[d*5])/Close[d*5])*100
}
class.GILD = fiveday.GILD
class.GILD[class.GILD > 6] <- 'A'                       # A
class.GILD[class.GILD > 0 & class.GILD <= 6 ] <- 'B'    # B
class.GILD[class.GILD > -6 & class.GILD <= 0] <- 'C'    # C
class.GILD[class.GILD <= -6] <- 'D'                     # D
class.GILD[class.GILD == 'A'] <- 4                      # A
class.GILD[class.GILD == 'B'] <- 3                      # B
class.GILD[class.GILD == 'C'] <- 2                      # C
class.GILD[class.GILD == 'D'] <- 1                      # D
### Generate Features for each Class
# class, preceeding 10 days close average centered at day10, preceeding 10 days average rsi, preceeding 5 days average rsi, preceeding day rsi, preceeding 10 day over sold average, preceeding 5 day over sold average, preceeding 10 day undersold average, preceeding 5 day undersold average
# preceeding 10 days average rsi
rsi10day.GILD =  rep(0, as.integer(length(rsi.GILD)/5))
segment = 1:length(rsi10day.GILD)
for (d in segment){
rsi10day.GILD[d] <- mean(rsi.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Log Returns
log10day.GILD =  rep(0, as.integer(length(log.GILD)/5))
segment = 1:length(log10day.GILD)
for (d in segment){
log10day.GILD[d] <- mean(log.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Simple Moving Average
sma10day.GILD =  rep(0, as.integer(length(sma.GILD)/5))
segment = 1:length(sma10day.GILD)
for (d in segment){
sma10day.GILD[d] <- mean(sma.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Oversold
over10day.GILD =  rep(0, as.integer(length(oversold.GILD)/5))
segment = 1:length(oversold.GILD)
for (d in segment){
over10day.GILD[d] <- mean(oversold.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Undersold
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
### Ground Truth Dataframe
Class.GILD = as.integer(class.GILD)
stockData <- data.frame(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD, over10day.GILD, under10day.GILD)
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
stockData <- data.frame(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD, over10day.GILD, under10day.GILD)
# preceeding 10 days average Oversold
over10day.GILD =  rep(0, as.integer(length(oversold.GILD)/5))
segment = 1:length(over10day.GILD)
for (d in segment){
over10day.GILD[d] <- mean(oversold.GILD[((d*5)-4):((d*5)+5)])
}
# preceeding 10 days average Undersold
under10day.GILD =  rep(0, as.integer(length(undersold.GILD)/5))
segment = 1:length(under10day.GILD)
for (d in segment){
under10day.GILD[d] <- mean(undersold.GILD[((d*5)-4):((d*5)+5)])
}
### Ground Truth Dataframe
Class.GILD = as.integer(class.GILD)
stockData <- data.frame(Class.GILD, rsi10day.GILD, log10day.GILD, sma10day.GILD, over10day.GILD, under10day.GILD)
fit1 = glm(Class.GILD~rsi10day.GILD+log10day.GILD+sma10day.GILD+over10day.GILD+under10day.GILD, data= stockData)
summary(fit1)
par(mfrow=c(3,1))
plot(rsi10day.GILD, Class.GILD)
abline(fit1, col="red")
plot(log10day.GILD, Class.GILD)
abline(fit1, col="red")
plot(sma10day.GILD, Class.GILD)
abline(fit1, col="red")
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS",
type="A")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="1"))
?plot.type
?plot
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS"
type="l"))
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l"))
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS"
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
### Model Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,1))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS"
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
### Model Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,1))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS"
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
### Model Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,1))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS",
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
points(11, reg.summary$adjr2[11], col ="red",cex =2, pch =20)
which.max(reg.summary$adjr2)
source("predict.R")
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
source("predict.R")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
Hitters=na.omit(Hitters)
source("predict.R")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
el Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
# Hitters=na.omit(Hitters)
# regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
# reg.summary=summary(regfit.full)
# par(mfrow=c(2,1))
# plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS",
#      type="l")
# plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
#      type="l")
# which.max(reg.summary$adjr2)
# points(11, reg.summary$adjr2[11], col ="red",cex =2, pch =20)
Hitters=na.omit(Hitters) # eliminate the missing values from the dataframe
source("predict.R") # find the predict.regsubsets function we created for regsubsets
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
which.min(rmse.cv)
points(12, rmse.cv[12], col ="red",cex =2, pch =20)
rmse.cv
Hitters=na.omit(Hitters) # eliminate the missing values from the dataframe
source("predict.R") # find the predict.regsubsets function we created for regsubsets
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
pp = which.min(rmse.cv)  # Find the minimum point
points(pp, rmse.cv[pp], col ="red",cex =2, pch =20)  #plot the
rmse.cv
### R Programming Quiz 2
source("cubefunction")
cube(3)
### R Programming Quiz 2
### R Programming Quiz 2
source("cubefunction")
cubefunction(3)
source("cubefunction")
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/DataScience")
### R Programming Quiz 2
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/DataScience")
source("cubefunction")
source("cubefunction.r")
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
source("question3.r")
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
