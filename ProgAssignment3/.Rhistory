type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
### Model Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
library(ggplot2)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
reg.summary=summary(regfit.full)
par(mfrow=c(2,1))
plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS",
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
type="l")
points(11, reg.summary$adjr2[11], col ="red",cex =2, pch =20)
which.max(reg.summary$adjr2)
source("predict.R")
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
source("predict.R")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
Hitters=na.omit(Hitters)
source("predict.R")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
el Selecction by Cross-Validation
### ------------------------------------
### We will do 10-fold cross-validation. Its really easy!
library(ISLR)
library(leaps)
setwd("C:/Users/jeffthatcher/Cloud Drive/Documents/R")
# Hitters=na.omit(Hitters)
# regfit.full=regsubsets(Salary~.,Hitters,nvmax=19 )
# reg.summary=summary(regfit.full)
# par(mfrow=c(2,1))
# plot(reg.summary$rss,xlab="Number of Variables", ylab="RSS",
#      type="l")
# plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq",
#      type="l")
# which.max(reg.summary$adjr2)
# points(11, reg.summary$adjr2[11], col ="red",cex =2, pch =20)
Hitters=na.omit(Hitters) # eliminate the missing values from the dataframe
source("predict.R") # find the predict.regsubsets function we created for regsubsets
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
which.min(rmse.cv)
points(12, rmse.cv[12], col ="red",cex =2, pch =20)
rmse.cv
Hitters=na.omit(Hitters) # eliminate the missing values from the dataframe
source("predict.R") # find the predict.regsubsets function we created for regsubsets
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19) #matrix for our errors, 10 -rows for each of the 10-folds, 19 subsets for each of our variables (20 - salary = 19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method
="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
pp = which.min(rmse.cv)  # Find the minimum point
points(pp, rmse.cv[pp], col ="red",cex =2, pch =20)  #plot the
rmse.cv
library(swirl)
swirl()
1:20
pi:20
pi:10
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0, 1, 2), each = 10)
end()
help()
library(swirl)
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
if <- get(num_vect<1)
tf <- get(num_vect<1)
play()
?if
?get
?get.values
play()
ret()
nxt()
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
pasre(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "Jeff")
my_name <- c(my_char, "Jeff")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", spe = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep = "")
paste(LETTERS, 1:4, sep = "-")
0
library(swirl)
swirl()
x <- C(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:20]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
c(3,5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
play()
x[!c(2, 10)]
x[-c(2, 10)]
nxt90
nxt()
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
getwd()
ls()
x <- 9
play()
ls()
nxt()
wd()
files.wd()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
create.file(testdir)
file.create(testdir)
file.create(testdir)
file.create("testdir")
dir.create("testdir")
setwd("testdir")
setwd(testdir)
setwd("testdir")
setwd("testdir")
setwd("testdir")
setwd("/testdir")
skip()
library(swirl)
swirl()
setwd("testdir")
library(swirl)
swirl()
setwd("testdir")
ls()
setwd("testdir")
library(swirl)
swirl()
setwd("testdir")
play()
getwd()
dir.create("testdir")
nxt()
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
list.files()
exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.dir("mytest3.R")
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
file.uncouple("testdir2")
uncouple("testdir2")
uncouple("testdir2")
file.remove("testdir2")
unlink("testdir2", recursive = TURE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
uncouple("testdir)
""
)
1
uncouple("testdir")
library(swirl)
swirl()
unlink("testdir")
unlink("testdir", recursive = TRUE)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector <- my_matrix
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
0
exit()
e90
asdf
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
play()
8 != 8.0
4 >= 9
nxt()
ints <- sample(10)
ints
ints >5
which (ints >7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail)plants, 15
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
d1 < Sys.Dat()
d1 <- Sys.Dat()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time(t2))
t2 <- as.POSIXlt(Sys.time(t1))
t2 <- as.POSIXlt(Sys.time(t1))
t1
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarterss(t2)
quarters(t2)
t3 <- "Octover 17, 1986 08:24"
t3 <- ("Octover 17, 1986 08:24")
t3 <- ("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t34)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x, y)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub ="My Plot Subtitle")
plot(cars, sub ="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
str(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
1:20
pi:10
15;1
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
library(datasets)
data(iris)
str(iris)
end
asdf
str(iris)
head(iris)
?mean
while {iris$Species == "virginica"
mean(iris$sepal.length)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/DataScience/ProgAssignment3")
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/DataScience/ProgAssignment3")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
